<?php

namespace MocaBonita\tools;

use Illuminate\Contracts\Support\Arrayable;
use Illuminate\Contracts\View\View;
use MocaBonita\MocaBonita;
use MocaBonita\view\MbView;

/**
 * Main class of the MocaBonita Exception
 *
 * @author    Jhordan Lima <jhorlima@icloud.com>
 * @category  WordPress
 * @package   \MocaBonita\tools
 * @copyright Jhordan Lima 2017
 *
 * @copyright Divisão de Projetos e Desenvolvimento - DPD
 * @copyright Núcleo de Tecnologia da Informação - NTI
 * @copyright Universidade Estadual do Maranhão - UEMA
 *
 */
class MbException extends \Exception
{

    /**
     * Stored wperror
     *
     * @var \WP_Error
     */
    protected $wpError;

    /**
     * Stored exception data
     *
     * @var null|array|Arrayable
     */
    protected $exceptionData;

    /**
     * Get exception data
     *
     * @return array|string
     */
    public function getExceptionData()
    {
        return $this->exceptionData;
    }

    /**
     * Get exception data in array
     *
     * @return array|null
     */
    public function getExcepitonDataArray()
    {
        if ($this->exceptionData instanceof Arrayable) {
            $this->exceptionData = $this->exceptionData->toArray();
        }

        if (!is_array($this->exceptionData)) {
            $this->exceptionData = null;
        }

        return $this->exceptionData;
    }

    /**
     * Get exception data view
     *
     * @return string|null
     */
    public function getExcepitonDataView()
    {
        if ($this->exceptionData instanceof View) {
            $this->exceptionData->with('wpError', $this->getWpError());
            $this->exceptionData = $this->exceptionData->render();
        }

        if (!is_string($this->exceptionData)) {
            $this->exceptionData = null;
        }

        return $this->exceptionData;
    }

    /**
     * Set exception data
     *
     * @param array|Arrayable|View $exceptionData
     *
     * @return MbException
     */
    public function setExceptionData($exceptionData)
    {
        $this->exceptionData = $exceptionData;

        return $this;
    }

    /**
     * @return \WP_Error | string
     */
    public function getWpError()
    {
        return $this->wpError;
    }

    /**
     * @param bool $stringInArray
     *
     * @return string[] | string
     */
    public function getWpErrorMessages($stringInArray = false)
    {
        return is_null($this->wpError) ? ($stringInArray ? [$this->getMessage()] : $this->getMessage()) : $this->wpError->get_error_messages();
    }

    /**
     * @param \WP_Error $wpError
     *
     * @return MbException
     */
    public function setWpError($wpError)
    {
        $this->wpError = $wpError;

        return $this;
    }

    /**
     * PHP 5 allows developers to declare constructor methods for classes.
     * Classes which have a constructor method call this method on each newly-created object,
     * so it is suitable for any initialization that the object may need before it is used.
     *
     * Note: Parent constructors are not called implicitly if the child class defines a constructor.
     * In order to run a parent constructor, a call to parent::__construct() within the child constructor is required.
     *
     * @param string                      $msg
     * @param int                         $code
     * @param null|array|MbView|Arrayable $dados
     * @param \WP_Error                   $wpError
     *
     * @link http://php.net/manual/en/language.oop5.decon.php
     */
    public function __construct($msg, $code = 400, $dados = null, \WP_Error $wpError = null)
    {
        parent::__construct($msg, $code);

        $this->setExceptionData($dados);
        $this->setWpError($wpError);
    }

    /**
     * Post an error notice on the dashboard and save
     *
     * @param \Exception $e
     */
    public static function registerError(\Exception $e)
    {
        MocaBonita::getInstance()->getMbResponse()->adminNotice($e->getMessage(), 'error');
    }
}
